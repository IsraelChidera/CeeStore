// <auto-generated />
using System;
using CeeStore.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CeeStore.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CeeStore.DAL.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId1");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrdersId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Orders", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EstimateDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentGateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("shippingmethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrdersId");

                    b.HasIndex("UserId1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("UserId1");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("91c22eb3-8e1c-4a39-bd5f-299dcad5c4c1"),
                            BrandName = "Xivex Wears",
                            Description = "Multi-colored vintage wears",
                            Price = 12500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-5.jpg",
                            ProductName = "Vintage wears",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("835bb68d-9e09-4b81-b1ed-3925a1db68af"),
                            BrandName = "Glover Sport Wears",
                            Description = "Red Arsenal T-shirt of all sizes (S,M,L,Xl,XXL)",
                            Price = 8500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-5.jpg",
                            ProductName = "Arsenal T-shirt",
                            Quantity = 8,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("c3e3c66c-c1d6-46f9-a725-9f24049652fd"),
                            BrandName = "X-G",
                            Description = "Black winter hoodies (S,M,L,Xl,XXL)",
                            Price = 14500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749326/samples/people/boy-snow-hoodie.jpg",
                            ProductName = "Spring Hoodie",
                            Quantity = 5,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("5987f77d-3ddc-4a9e-b1e4-2d79e986da83"),
                            BrandName = "DII255",
                            Description = "Dry Electric Iron - DII255",
                            Price = 5800m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749330/samples/ecommerce/accessories-bag.jpg",
                            ProductName = "Electric Iron",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("b56c5e4c-9307-47af-9ebe-3d4161705cba"),
                            BrandName = "Xcrux",
                            Description = "Legends are born in March premium class T-shirt",
                            Price = 5000m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749330/samples/ecommerce/accessories-bag.jpg",
                            ProductName = "Plain Tshirt",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("ee67a92c-a8e2-44a1-8e50-14a59d718f84"),
                            BrandName = "Grey Tshirt Store",
                            Description = "Loius Vuitton Beenie (red, yellow, black)",
                            Price = 6500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749329/samples/ecommerce/leather-bag-gray.jpg",
                            ProductName = "Plain Men's T-shirts Combo of 3",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("1d845433-2784-4ddb-be79-39e17377136c"),
                            BrandName = "Nivea",
                            Description = "NIVEA Perfect & Radiant 3 In 1 Face Cleanser For Women - 150ml",
                            Price = 15000m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749329/samples/ecommerce/leather-bag-gray.jpg",
                            ProductName = "Nivea Perfect & Radiant",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("2cdeb67f-3abb-45ad-9453-a6f441200646"),
                            BrandName = "Jameson Black",
                            Description = "Jameson Black Barrel 7",
                            Price = 16085m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749330/samples/ecommerce/accessories-bag.jpg",
                            ProductName = "Jameson Black",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("44b7062d-7ba5-4f9e-8e17-a55dc88299cb"),
                            BrandName = "Coca-cola",
                            Description = "Coca-cola Drink - 50cl P",
                            Price = 1900m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749330/samples/ecommerce/accessories-bag.jpg",
                            ProductName = "Coca-cola",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("162d1534-8a65-44c8-89df-2c0730864f2b"),
                            BrandName = "Absolut",
                            Description = "Absolut Vodka Vanilla 1L",
                            Price = 6000m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-4.jpg",
                            ProductName = "Absolut Vodka",
                            Quantity = 5,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("7a0aaaea-d2ba-4cc1-86dd-f01c5343c91d"),
                            BrandName = "Maltina",
                            Description = "Maltina Classic Can 33CL",
                            Price = 5400m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-4.jpg",
                            ProductName = "Maltina Classic",
                            Quantity = 24,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("db2f4e29-9e36-4cc9-855c-176ff930c37a"),
                            BrandName = "Harpic",
                            Description = "Harpic Toilet Cleaner: M",
                            Price = 1800m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-4.jpg",
                            ProductName = "Harpic Cleaner",
                            Quantity = 14,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("68ba7ee0-5e59-46e0-a524-496a68bb0b09"),
                            BrandName = "Monster",
                            Description = "Monster Can Green 44cl",
                            Price = 11000m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-4.jpg",
                            ProductName = "Monster drink",
                            Quantity = 14,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("406b788c-b52f-4553-8f27-97a547045841"),
                            BrandName = "Jameson",
                            Description = "Jameson Irish Whiskey",
                            Price = 10500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-4.jpg",
                            ProductName = "Jameson Whiskey",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("db3b7be1-37a3-40d3-b363-5ae91cf7b47c"),
                            BrandName = "New Balance",
                            Description = "White soled, high new balance",
                            Price = 15000m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-5.jpg",
                            ProductName = "New balance sneakers",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        },
                        new
                        {
                            ProductId = new Guid("6eae2eab-7367-4eb6-af47-7932690e577c"),
                            BrandName = "Nike",
                            Description = "White Air Jordan II",
                            Price = 55500m,
                            ProductImage = "https://res.cloudinary.com/dcphruz6h/image/upload/v1684749344/cld-sample-5.jpg",
                            ProductName = "Air Jordan II",
                            Quantity = 10,
                            UserId = new Guid("06dd95bf-2c94-4e3d-8424-57d912f135d7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "35e7a0b6-7a90-45b2-9c2f-271817ffe42f",
                            ConcurrencyStamp = "13e7ac1c-0e9c-4e33-ad7c-d238b4088dfe",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "35ca7534-83e0-4bae-8307-ea4be45984b7",
                            ConcurrencyStamp = "fcd76efd-24ae-4d8c-9ddf-abd13586a9fa",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        },
                        new
                        {
                            Id = "acef6776-83d4-425b-aabc-fc32e1fc2075",
                            ConcurrencyStamp = "03e8f342-0c3a-4e91-84d1-498e34cda185",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Cart", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.CartItem", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CeeStore.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.OrderItem", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CeeStore.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Orders", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Product", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CeeStore.DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CeeStore.DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("CeeStore.DAL.Entities.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
